/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import Parsistence.Buku;
import Parsistence.PeminjamanBuku;
import Parsistence.PeminjamanBukuPK;
import com.toedter.calendar.JDateChooser;
import java.awt.FlowLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
//import org.apache.commons.csv.CSVFormat;
//import org.apache.commons.csv.CSVRecord;

/**
 *
 * @author Fitriyah
 */
public class PinjamBuku extends javax.swing.JFrame {

    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }

    private void tampil() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("JendelaKampusPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<PeminjamanBuku> querySelectAll = entityManager.createNamedQuery("PeminjamanBuku.findAll", PeminjamanBuku.class);
        List<PeminjamanBuku> results = querySelectAll.getResultList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        int nomor = 1;
        for (PeminjamanBuku data : results) {
            Object[] baris = new Object[9];
            baris[0] = nomor;
            baris[1] = data.getBuku().getIdBuku();

            // Periksa apakah data.getIsbn() tidak null sebelum memanggil getJudul()
            if (data.getBuku().getIdBuku() != null) {
                baris[2] = data.getBuku().getIdBuku();
            } else {
                baris[2] = ""; // Atau nilai default yang sesuai jika data.getIsbn() null
            }
            baris[3] = data.getPeminjam();
            baris[4] = data.getNamaPeminjam();
            baris[5] = data.getTanggalPinjam();
            baris[6] = data.getTanggalKembali();
            baris[7] = data.getStatus();

            model.addRow(baris);
            nomor++;
        }
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    private void tampilbuku() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("JendelaKampusPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<Buku> querySelectAll = entityManager.createNamedQuery("Buku.findAll", Buku.class);
        List<Buku> results = querySelectAll.getResultList();

        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);

        int nomor = 1; // Inisialisasi nomor awal

        for (Buku data : results) {
            Object[] baris = new Object[10]; // Tambahkan satu kolom untuk nomor
            baris[0] = nomor;
            baris[1] = data.getIdBuku();
            baris[2] = data.getIsbn();
            baris[3] = data.getJudul();
            baris[4] = data.getBahasa();
            baris[5] = data.getPenerbit();
            baris[6] = data.getPengarang();

            model.addRow(baris);
            nomor++; // Tambah 1 untuk nomor berikutnya
        }
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    public PinjamBuku() {

        initComponents();
        tampil();

    }

    private void kosongkan_form() {
        IDPeminjam.setText("");
        IDBuku.setText("");
        ISBN.setText("");
        Nama.setText("");
        TglPinjam.setText("");
        TglKembali.setText("");
        Angkatan.setText("");
        jComboBox1.setSelectedItem("");

    }
//
//    /**
//     * This method is called from within the constructor to initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is always
//     * regenerated by the Form Editor.
//     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        IDPeminjam = new javax.swing.JTextField();
        IDBuku = new javax.swing.JTextField();
        ISBN = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtsearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        Simpan = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Hapus = new javax.swing.JButton();
        Cetak = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        TglPinjam = new javax.swing.JTextField();
        TglKembali = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        PinjamTerbanyak = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        Angkatan = new javax.swing.JTextField();
        Nama = new javax.swing.JTextField();

        jDialog1.setSize(new java.awt.Dimension(800, 500));
        jDialog1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "ISBN", "Judul", "Kategori", "Pengarang", "Penerbit", "Tahun Terbit", "Jumlah Halaman", "Jumlah Buku"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable2KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        jDialog1.getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 760, 310));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("SHORT BY :");
        jDialog1.getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, -1, 20));

        jLabel24.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("SEARCH :");
        jDialog1.getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, 20));

        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField6KeyReleased(evt);
            }
        });
        jDialog1.getContentPane().add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 140, -1));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ISBN", "Judul", "Kategori", "Pengarang", "Penerbit", "Tahun Terbit", "Jumlah Halaman", "Jumlah Buku" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jDialog1.getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, 160, -1));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Rekomendasi 2 (9).png"))); // NOI18N
        jDialog1.getContentPane().add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setText("PEMINJAMAN BUKU");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 340, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("ID Peminjam");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 110, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Tanggal Peminjaman");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 140, 160, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ID Buku");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 110, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Angkatan");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 230, 120, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("ISBN");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 110, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Status");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 260, 150, -1));
        getContentPane().add(IDPeminjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, 220, -1));
        getContentPane().add(IDBuku, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 220, -1));

        ISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ISBNActionPerformed(evt);
            }
        });
        getContentPane().add(ISBN, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 180, 220, -1));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/setting 1.png"))); // NOI18N
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, -1, -1));

        jLabel19.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("PERPUSTAKAAN SISTEM INFORMASI");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 50, 200, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "ID Peminjam", "ISBN", "Nama", "Angkatan", "Program Studi", "Status", "Tanggal Peminjaman", "Tanggal Pengembalian"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, 950, 140));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Nama Peminjam");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 150, -1));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Tanggal Pengembalian");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 180, 170, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Peminjam", "ISBN", "Nama", "Angkatan", "Prodi", "Status", "Tanggal Peminjaman", "Tanggal Pengembalian" }));
        jComboBox2.setBorder(null);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 90, 120, -1));

        Simpan.setBackground(new java.awt.Color(255, 153, 102));
        Simpan.setForeground(new java.awt.Color(255, 255, 255));
        Simpan.setText("SIMPAN");
        Simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimpanActionPerformed(evt);
            }
        });
        getContentPane().add(Simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 550, -1, 30));

        Update.setBackground(new java.awt.Color(255, 153, 102));
        Update.setForeground(new java.awt.Color(255, 255, 255));
        Update.setText("UPDATE");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        getContentPane().add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, 30));

        Hapus.setBackground(new java.awt.Color(255, 153, 102));
        Hapus.setForeground(new java.awt.Color(255, 255, 255));
        Hapus.setText("HAPUS");
        Hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HapusActionPerformed(evt);
            }
        });
        getContentPane().add(Hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 550, -1, 30));

        Cetak.setBackground(new java.awt.Color(255, 153, 102));
        Cetak.setForeground(new java.awt.Color(255, 255, 255));
        Cetak.setText("CETAK");
        Cetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CetakActionPerformed(evt);
            }
        });
        getContentPane().add(Cetak, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 550, -1, 30));

        jButton5.setBackground(new java.awt.Color(255, 153, 102));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("UPLOAD");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 550, -1, 30));

        TglPinjam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TglPinjamMouseClicked(evt);
            }
        });
        TglPinjam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TglPinjamActionPerformed(evt);
            }
        });
        getContentPane().add(TglPinjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 140, 220, -1));

        TglKembali.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TglKembaliMouseClicked(evt);
            }
        });
        getContentPane().add(TglKembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 180, 220, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dipinjam", "Sudah Kembali" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 260, -1, -1));

        PinjamTerbanyak.setBackground(new java.awt.Color(255, 153, 102));
        PinjamTerbanyak.setForeground(new java.awt.Color(255, 255, 255));
        PinjamTerbanyak.setText("BUKU DIPINJAM TERBANYAK");
        PinjamTerbanyak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PinjamTerbanyakActionPerformed(evt);
            }
        });
        getContentPane().add(PinjamTerbanyak, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 550, -1, 30));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Rekomendasi 2 (3).png"))); // NOI18N
        getContentPane().add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        Angkatan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AngkatanMouseClicked(evt);
            }
        });
        Angkatan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AngkatanKeyTyped(evt);
            }
        });
        getContentPane().add(Angkatan, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 220, 220, -1));

        Nama.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NamaMouseClicked(evt);
            }
        });
        getContentPane().add(Nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, 220, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimpanActionPerformed
//        // TODO add your handling code here:
        String id_peminjam = IDPeminjam.getText().trim();
        String id_buku = IDBuku.getText();
        String isbn = ISBN.getText();
        String nama = Nama.getText();
        String tgl = TglPinjam.getText();
        String tanggalpeminjaman = TglPinjam.getText();
        String tanggalpengembalian = TglKembali.getText();
        String status = (String) jComboBox1.getSelectedItem();
        SimpleDateFormat tg = new SimpleDateFormat("dd-MM-yyyy");

        try {

            EntityManager entityManager = Persistence.createEntityManagerFactory("JendelaKampusPU").createEntityManager();
            entityManager.getTransaction().begin();
            Buku wm = entityManager.find(Buku.class, id_buku);

            PeminjamanBuku p = new PeminjamanBuku();
            PeminjamanBukuPK peminjamanBukuPK = new PeminjamanBukuPK();
            peminjamanBukuPK.setIdBuku(id_buku);
            p.setPeminjamanBukuPK(peminjamanBukuPK);
            p.setNamaPeminjam(nama);
            p.setTanggalPinjam(tg.parse(tanggalpeminjaman));
            p.setTanggalKembali(tg.parse(tanggalpengembalian));
            p.setStatus(status);

            entityManager.persist(p);
            entityManager.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Data berhasil disimpan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {

            JOptionPane.showMessageDialog(null, "Gagal menyimpan data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        tampil();
        kosongkan_form();
    }//GEN-LAST:event_SimpanActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
//        // TODO add your handling code here:
        String id_peminjam = IDPeminjam.getText().trim();
        String id_buku = IDBuku.getText();
        String isbn = ISBN.getText();
        String nama = Nama.getText();
        String tgl = TglPinjam.getText();
        String tanggalpeminjaman = TglPinjam.getText();
        String tanggalpengembalian = TglKembali.getText();
        String status = (String) jComboBox1.getSelectedItem();
        SimpleDateFormat tg = new SimpleDateFormat("dd-MM-yyyy");

        try {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JendelaKampusPU");
            EntityManager em = emf.createEntityManager();
            Buku wm = em.find(Buku.class, id_buku);
            PeminjamanBuku p = new PeminjamanBuku();
            PeminjamanBukuPK peminjamanBukuPK = new PeminjamanBukuPK();
            peminjamanBukuPK.setIdBuku(id_buku);
            p.setPeminjamanBukuPK(peminjamanBukuPK);
            p.setNamaPeminjam(nama);
            p.setTanggalPinjam(tg.parse(tanggalpeminjaman));
            p.setTanggalKembali(tg.parse(tanggalpengembalian));
            p.setStatus(status);
//            p.em.getTransaction().begin();
            em.merge(p);
            em.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Data berhasil diupdate.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {

            JOptionPane.showMessageDialog(null, "Gagal mengupdate data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        tampil();
        kosongkan_form();
    }//GEN-LAST:event_UpdateActionPerformed

    private void HapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HapusActionPerformed
        String id_buku = IDBuku.getText().trim();
        int dialogResult = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjectUASPU");
                EntityManager em = emf.createEntityManager();
                em.getTransaction().begin();

                PeminjamanBuku b = em.find(PeminjamanBuku.class, id_buku);
                em.remove(b);

                em.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "Data berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);

                kosongkan_form();
                tampil();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Gagal menghapus data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_HapusActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        JFileChooser filechooser = new JFileChooser();

        int i = filechooser.showOpenDialog(null);
        if (i == JFileChooser.APPROVE_OPTION) {

            EntityManager entityManager = Persistence.createEntityManagerFactory("JendelaKampusPU").createEntityManager();
            entityManager.getTransaction().begin();

            File f = filechooser.getSelectedFile();
            String filepath = f.getPath();
            String fi = f.getName();
            //Parsing CSV Data
            System.out.print(filepath);
            DefaultTableModel csv_data = new DefaultTableModel();

//            try {
//
//                InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(filepath));
////                org.apache.commons.csv.CSVParser csvParser = CSVFormat.DEFAULT.parse(inputStreamReader);
////                for (CSVRecord csvRecord : csvParser) {
//                    PeminjamanBuku b = new PeminjamanBuku();
//                    b.setIdpeminjam(csvRecord.get(0));
//                    b.setNama(csvRecord.get(1));
//                    b.setAngkatan(csvRecord.get(2));
//                    b.setProdi(csvRecord.get(3));
//                    b.setStatus(csvRecord.get(4));
//                    b.setTanggalpeminjaman(csvRecord.get(5));
//                    b.setTanggalpengembalian(csvRecord.get(6));
//
//                    entityManager.persist(b);
//
//                }
//
//            } catch (Exception ex) {
//                System.out.println("Error in Parsing CSV File");
//            }
//
//            entityManager.getTransaction().commit();
//        
    }//GEN-LAST:event_jButton5ActionPerformed
    }
    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased
        try {
            String selection = ((String) jComboBox2.getSelectedItem()).toLowerCase();
            String searchTerm = txtsearch.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT p FROM PeminjamanBuku p WHERE ";

            switch (jComboBox2.getSelectedIndex()) {
                case 0:
                    queryString += "LOWER(p.idpeminjam) LIKE LOWER(:searchTerm)";
                    break;
                case 1:
                    queryString += "LOWER(p.isbn) LIKE LOWER(:searchTerm)";
                    break;
                case 2:
                    queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                    break;
                case 3:
                    queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case 4:
                    queryString += "LOWER(p.prodi) LIKE LOWER(:searchTerm)";
                    break;
                case 5:
                    queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                    break;
                case 6:
                    queryString += "LOWER(p.tanggalpeminjaman) LIKE LOWER(:searchTerm)";
                    break;
                case 7:
                    queryString += "LOWER(p.tanggalpengembalian) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected. Selected Criteria: " + selection);
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JendelaKampusPU");
            EntityManager em = emf.createEntityManager();

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            System.out.println("Query: " + queryString);
            System.out.println("Search Term: " + searchTerm);

            TypedQuery<PeminjamanBuku> query = em.createQuery(queryString, PeminjamanBuku.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<PeminjamanBuku> results = query.getResultList();

            DefaultTableModel dataModel = new DefaultTableModel();

            // Add columns to the model
            dataModel.addColumn("No.");
            dataModel.addColumn("ID Peminjam");
            dataModel.addColumn("ISBN");
            dataModel.addColumn("Nama");
            dataModel.addColumn("Angkatan");
            dataModel.addColumn("Prodi");
            dataModel.addColumn("status");
            dataModel.addColumn("Tanggal Peminjaman");
            dataModel.addColumn("Tanggal Pengembalian");
            // ... add other columns as needed
            int nomor = 1;
            // Add rows to the model
            for (PeminjamanBuku result : results) {
                Object[] rowData = {
                    nomor,
                    result.getPeminjamanBukuPK(),
                    result.getPeminjam(),
                    result.getNamaPeminjam(),
                    result.getPetugas(),
                    result.getKeterangan(),
                    result.getStatus(),
                    result.getTanggalPinjam(),
                    result.getTanggalKembali(), // ... add other data fields as needed
                };
                dataModel.addRow(rowData);
                nomor++;
            }

            // Set jTable1 with the created model
            jTable1.setModel(dataModel);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_txtsearchKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int baris = jTable1.rowAtPoint(evt.getPoint());

        String IdBuku = jTable1.getValueAt(baris, 1).toString();
        IDBuku.setText(IdBuku);

        String isbn = jTable1.getValueAt(baris, 2).toString();
        ISBN.setText(isbn);// Assuming jComboBox3 is a JComboBox

        String IdPeminjam = jTable1.getValueAt(baris, 3).toString();
        IDPeminjam.setText(IdPeminjam);

        String nama = jTable1.getValueAt(baris, 4).toString();
        Nama.setText(nama);

        String tglPinjam = jTable1.getValueAt(baris, 5).toString();
        TglPinjam.setText(tglPinjam);

        String tglKembali = jTable1.getValueAt(baris, 6).toString();
        TglKembali.setText(tglKembali);

        String angkatan = jTable1.getValueAt(baris, 7).toString();
        Angkatan.setText(angkatan);

        String status = jTable1.getValueAt(baris, 8).toString();
        jComboBox1.setSelectedItem(status); // Assuming jComboBox1 is a JComboBox

    }//GEN-LAST:event_jTable1MouseClicked

    private void CetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CetakActionPerformed
        // TODO add your handling code here:
        try {
            String selection = ((String) jComboBox2.getSelectedItem()).toLowerCase();
            String searchTerm = txtsearch.getText().trim();

            String queryString = "SELECT p FROM PeminjamanBuku p WHERE ";

            switch (jComboBox2.getSelectedIndex()) {
                case 0:
                    queryString += "LOWER(p.idpeminjam) LIKE LOWER(:searchTerm)";
                    break;
                case 1:
                    queryString += "LOWER(p.isbn) LIKE LOWER(:searchTerm)";
                    break;
                case 2:
                    queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                    break;
                case 3:
                    queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case 4:
                    queryString += "LOWER(p.prodi) LIKE LOWER(:searchTerm)";
                    break;
                case 5:
                    queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                    break;
                case 6:
                    queryString += "LOWER(p.tanggalpeminjaman) LIKE LOWER(:searchTerm)";
                    break;
                case 7:
                    queryString += "LOWER(p.tanggalpengembalian) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected. Selected Criteria: " + selection);
            }

            // ... (switch statement to build the query based on selection)
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjectUASPU");
            EntityManager em = emf.createEntityManager();

            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<PeminjamanBuku> query = em.createQuery(queryString, PeminjamanBuku.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<PeminjamanBuku> results = query.getResultList();

            if (results.isEmpty()) {
                System.out.println("No results found for the given search criteria.");
                return;
            }

            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(results);

            // Load the JasperReports design file
            InputStream inputStream = PeminjamanBuku.class.getResourceAsStream("reportPeminjamanBuku.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            Map<String, Object> parameter = new HashMap<>();
            parameter.put("querySearch", searchTerm);
            parameter.put("searchBy", selection);
            // Compile the JasperReports design
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            // Fill the report with data
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameter, dataSource);

            if (jasperPrint.getPages().isEmpty()) {
                System.out.println("No data to print!");
                return;
            }

            JasperViewer viewer = new JasperViewer(jasperPrint, false);
            viewer.setTitle("Report Peminjaman");
            viewer.setVisible(true);

        } catch (JRException ex) {
            System.out.println("Error printing report: " + ex.getMessage());
            ex.printStackTrace();
        } catch (Exception e) {
            System.out.println("Unexpected error: " + e.getMessage());
            e.printStackTrace();
        }


    }//GEN-LAST:event_CetakActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void PinjamTerbanyakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PinjamTerbanyakActionPerformed
        // TODO add your handling code here:
        try {
            String selection = ((String) jComboBox2.getSelectedItem()).toLowerCase();
            String searchTerm = txtsearch.getText().trim();
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjectUASPU");
            EntityManager em = emf.createEntityManager();

            String queryString = "SELECT p FROM PeminjamanBuku p WHERE ";

            switch (jComboBox2.getSelectedIndex()) {
                case 0:
                    queryString += "LOWER(p.idpeminjam) LIKE LOWER(:searchTerm)";
                    break;
                case 1:
                    queryString += "LOWER(p.isbn) LIKE LOWER(:searchTerm)";
                    break;
                case 2:
                    queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                    break;
                case 3:
                    queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case 4:
                    queryString += "LOWER(p.prodi) LIKE LOWER(:searchTerm)";
                    break;
                case 5:
                    queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                    break;
                case 6:
                    queryString += "LOWER(p.tanggalpeminjaman) LIKE LOWER(:searchTerm)";
                    break;
                case 7:
                    queryString += "LOWER(p.tanggalpengembalian) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected. Selected Criteria: " + selection);
            }

            TypedQuery<PeminjamanBuku> query = em.createQuery(queryString, PeminjamanBuku.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<PeminjamanBuku> results = query.getResultList();

            if (results.isEmpty()) {
                System.out.println("No results found for the given criteria.");
                return;
            }

            // Menghitung ISBN yang paling banyak dipinjam
            Map<String, Integer> isbnCountMap = new HashMap<>();
            String mostFrequentIsbn = "";
            int maxCount = 0;

            for (PeminjamanBuku peminjaman : results) {
                String IdBuku = peminjaman.getPeminjamanBukuPK().getIdBuku();
                int count = isbnCountMap.getOrDefault(IdBuku, 0) + 1;
                isbnCountMap.put(IdBuku, count);
                if (count > maxCount) {
                    maxCount = count;
                    mostFrequentIsbn = IdBuku;
                }
            }

            // Load the JasperReports design file
            InputStream inputStream = PeminjamanBuku.class.getResourceAsStream("reportTerbanyakPinjam.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            // Fill the report with data
            Map<String, Object> parameter = new HashMap<>();
            parameter.put("mostFrequentIsbn", mostFrequentIsbn);
            parameter.put("maxCount", maxCount);
            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(results);
            parameter.put("peminjamanDataSource", dataSource);

            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameter, dataSource);

            // Show the report
            JasperViewer viewer = new JasperViewer(jasperPrint, false);
            viewer.setVisible(true);

        } catch (Exception e) {
            System.out.println("Unexpected error: " + e.getMessage());
            e.printStackTrace();
        }


    }//GEN-LAST:event_PinjamTerbanyakActionPerformed

    private void TglPinjamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TglPinjamMouseClicked
//        // TODO add your handling code here:
        JFrame frame = new JFrame("Date Picker Example");
        frame.setSize(200, 100);

        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout());

        JDateChooser dateChooser = new JDateChooser();

// Menghapus editor dari JDateChooser agar tidak dapat diedit
        dateChooser.getDateEditor().setEnabled(false);

// Set format tanggal yang diinginkan pada JDateChooser
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        dateChooser.setDateFormatString("yyyy/MM/dd");

        dateChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                Date selectedDate = dateChooser.getDate();
                if (selectedDate != null) {
                    String formattedDate = dateFormat.format(selectedDate);
                    dateChooser.setDate(selectedDate); // Menetapkan tanggal yang diformat kembali ke dateChooser
                    dateChooser.repaint(); // Memperbarui tampilan dateChooser
                    dateChooser.transferFocus(); // Pindah fokus dari dateChooser

                    // Set tanggal yang diformat ke j4
                    TglPinjam.setText(formattedDate);
                }
            }
        });

        panel.add(dateChooser);

        frame.add(panel);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
    }//GEN-LAST:event_TglPinjamMouseClicked

    private void TglKembaliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TglKembaliMouseClicked
        // TODO add your handling code here:
        JFrame frame = new JFrame("Date Picker Example");
        frame.setSize(200, 100);

        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout());

        JDateChooser dateChooser = new JDateChooser();

// Menghapus editor dari JDateChooser agar tidak dapat diedit
        dateChooser.getDateEditor().setEnabled(false);

// Set format tanggal yang diinginkan pada JDateChooser
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        dateChooser.setDateFormatString("yyyy/MM/dd");

        dateChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                Date selectedDate = dateChooser.getDate();
                if (selectedDate != null) {
                    String formattedDate = dateFormat.format(selectedDate);
                    dateChooser.setDate(selectedDate); // Menetapkan tanggal yang diformat kembali ke dateChooser
                    dateChooser.repaint(); // Memperbarui tampilan dateChooser
                    dateChooser.transferFocus(); // Pindah fokus dari dateChooser

                    // Set tanggal yang diformat ke j4
                    TglKembali.setText(formattedDate);
                }
            }
        });

        panel.add(dateChooser);

        frame.add(panel);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
    }//GEN-LAST:event_TglKembaliMouseClicked

    private void jTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyReleased
        // TODO add your handling code here:
        try {
            String selection = (String) jComboBox3.getSelectedItem();
            String searchTerm = jTextField6.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT d FROM Buku d WHERE ";

            switch (jComboBox3.getSelectedIndex()) {
                case 0:
                    queryString += "LOWER(d.isbn) LIKE LOWER(:searchTerm)";
                    break;
                case 1:
                    queryString += "LOWER(d.judul) LIKE LOWER(:searchTerm)";
                    break;
                case 2:
                    queryString += "LOWER(d.subjudul) LIKE LOWER(:searchTerm)";
                    break;
                case 3:
                    queryString += "LOWER(d.pengarang) LIKE LOWER(:searchTerm)";
                    break;
                case 4:
                    queryString += "LOWER(d.penerbit) LIKE LOWER(:searchTerm)";
                    break;
                case 5:
                    queryString += "LOWER(d.tahunterbit) LIKE LOWER(:searchTerm)";
                    break;
                case 6:
                    queryString += "LOWER(d.jumlahhalaman) LIKE LOWER(:searchTerm)";
                    break;
                case 7:
                    queryString += "LOWER(d.jumlahbuku) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JendelaKampusPU");
            EntityManager em = emf.createEntityManager();

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<Buku> query = em.createQuery(queryString, Buku.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<Buku> results = query.getResultList();

            DefaultTableModel dataModel = new DefaultTableModel();

            // Add columns to the model
            dataModel.addColumn("No.");
            dataModel.addColumn("ISBN");
            dataModel.addColumn("Judul");
            dataModel.addColumn("ID Kategori");
            dataModel.addColumn("Kategori");
            dataModel.addColumn("Pengarang");
            dataModel.addColumn("Penerbit");
            dataModel.addColumn("Tahun Terbit");
            dataModel.addColumn("Jumlah Halaman");
            dataModel.addColumn("Jumlah Buku");
            // ... add other columns as needed
            int nomor = 1;
            // Add rows to the model
            for (Buku result : results) {
                Object[] rowData = {
                    nomor,
                    result.getIsbn(),
                    result.getJudul(),
                    result.getIdBuku(),
                    result.getKategoriCollection(),
                    result.getPengarang(),
                    result.getPenerbit(), // ... add other data fields as needed
                };
                dataModel.addRow(rowData);
                nomor++;
            }
            // Set jTable1 with the created model
            jTable2.setModel(dataModel);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jTextField6KeyReleased

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jTable2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2KeyReleased

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int baris = jTable2.rowAtPoint(evt.getPoint());
        if (baris > -1) { // Memastikan baris terpilih tidak negatif (-1 menunjukkan tidak ada baris yang dipilih)
            Object nilaiKolom0 = jTable2.getValueAt(baris, 1);
            if (nilaiKolom0 != null) {
                String isbn = nilaiKolom0.toString();
                ISBN.setText(isbn);
            }
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void AngkatanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AngkatanMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_AngkatanMouseClicked

    private void AngkatanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AngkatanKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_AngkatanKeyTyped

    private void NamaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NamaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_NamaMouseClicked

    private void TglPinjamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TglPinjamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TglPinjamActionPerformed

    private void ISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ISBNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ISBNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PinjamBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PinjamBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PinjamBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PinjamBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PinjamBuku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Angkatan;
    private javax.swing.JButton Cetak;
    private javax.swing.JButton Hapus;
    private javax.swing.JTextField IDBuku;
    private javax.swing.JTextField IDPeminjam;
    private javax.swing.JTextField ISBN;
    private javax.swing.JTextField Nama;
    private javax.swing.JButton PinjamTerbanyak;
    private javax.swing.JButton Simpan;
    private javax.swing.JTextField TglKembali;
    private javax.swing.JTextField TglPinjam;
    private javax.swing.JButton Update;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables

}
