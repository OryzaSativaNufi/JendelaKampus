/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import Parsistence.Buku;
import Parsistence.PeminjamanBuku;
import Parsistence.PeminjamanBukuPK;
import Parsistence.PeminjamanSkripsi;
import Parsistence.PeminjamanSkripsiPK;
import Parsistence.Skripsi;
import com.toedter.calendar.JDateChooser;
import java.awt.FlowLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import static org.eclipse.persistence.logging.SessionLog.JPA;

/**
 *
 * @author Fitriyah
 */
public class PinjamSkripsi extends javax.swing.JFrame {

    /**
     * Creates new form PeminjamanSkripsiGUI
     */
    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }

    private void tampil() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("JendelaKampusPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<PeminjamanSkripsi> querySelectAll = entityManager.createNamedQuery("PeminjamanSkripsi.findAll", PeminjamanSkripsi.class);
        List<PeminjamanSkripsi> results = querySelectAll.getResultList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        int nomor = 1;
        for (PeminjamanSkripsi data : results) {
            Object[] baris = new Object[9];
            baris[0] = nomor;
            baris[1] = data.getPeminjamanSkripsiPK().getIdSkripsi();
            baris[2] = data.getNamaPeminjam();
            baris[3] = data.getPeminjam();
            baris[4] = data.getSkripsi();
            baris[5] = data.getPetugas();
            baris[6] = data.getKeterangan();
            baris[7] = data.getTanggalPinjam();
            baris[8] = data.getTanggalKembali();
            baris[9] = data.getStatus();
            model.addRow(baris);
            nomor++;
        }
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    public PinjamSkripsi() {
        initComponents();

    }

    private void kosongkan_form() {
        IDPeminjam.setText("");
        IDSkripsi.setText("");
        ISBN.setText("");
        Nama.setText("");
        TglPinjam.setText("");
        TglKembali.setText("");
        Angkatan.setText("");
        jComboBox1.setSelectedItem("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jTextsearch = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        IDPeminjam = new javax.swing.JTextField();
        IDSkripsi = new javax.swing.JTextField();
        ISBN = new javax.swing.JTextField();
        txtsearch = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        TglPinjam = new javax.swing.JTextField();
        TglKembali = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        Angkatan = new javax.swing.JTextField();
        Nama = new javax.swing.JTextField();

        jDialog1.setSize(new java.awt.Dimension(900, 500));
        jDialog1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Nomor Indeks", "Judul Skripsi", "Penulis", "Kategori", "Program Studi", "Angkatan", "Tahun Terbit", "Jumlah Halaman", "Tanggal Penyelesaian"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable3);

        jDialog1.getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 830, 310));

        jTextsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextsearchKeyReleased(evt);
            }
        });
        jDialog1.getContentPane().add(jTextsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 210, -1));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setText("Search :");
        jDialog1.getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel24.setText("Short by :");
        jDialog1.getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 70, -1));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nomor Indeks", "Judul Skripsi", "Penulis", "Kategori", "Program Studi", "Angkatan", "Tahun Terbit", "Jumlah Halaman", "Tanggal Penyelesaian" }));
        jComboBox3.setBorder(null);
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jDialog1.getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, 160, -1));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Rekomendasi 2 (9).png"))); // NOI18N
        jDialog1.getContentPane().add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setText("PEMINJAMAN SKRIPSI");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 340, -1));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/setting 1.png"))); // NOI18N
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, -1, -1));

        jLabel19.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("PERPUSTAKAAN SISTEM INFORMASI");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "ID Peminjam", "Nomor Indeks", "Nama", "Angkatan", "Program Studi", "Status", "Tanggal Peminjaman", "Tanggal Pengembalian"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, 830, 120));

        jButton1.setBackground(new java.awt.Color(255, 153, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("SIMPAN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 580, -1, -1));

        jButton2.setBackground(new java.awt.Color(255, 153, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("UPDATE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 580, -1, -1));

        jButton3.setBackground(new java.awt.Color(255, 153, 102));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("HAPUS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 580, -1, -1));

        jButton4.setBackground(new java.awt.Color(255, 153, 102));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("CETAK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 580, -1, -1));

        jButton5.setBackground(new java.awt.Color(255, 153, 102));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("UPLOAD");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 580, -1, -1));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Rekomendasi 2 (3).png"))); // NOI18N
        getContentPane().add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("ID Peminjam");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 110, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Tanggal Peminjaman");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 200, 160, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ID Skripsi");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 110, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Angkatan");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 120, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("ISBN");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 110, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Status");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 320, 150, -1));
        getContentPane().add(IDPeminjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 220, -1));
        getContentPane().add(IDSkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 220, -1));

        ISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ISBNActionPerformed(evt);
            }
        });
        getContentPane().add(ISBN, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 290, 220, -1));

        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, 200, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Nama Peminjam");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 150, -1));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Tanggal Pengembalian");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 240, 170, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Peminjam", "ISBN", "Nama", "Angkatan", "Prodi", "Status", "Tanggal Peminjaman", "Tanggal Pengembalian" }));
        jComboBox2.setBorder(null);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 120, 120, -1));

        TglPinjam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TglPinjamMouseClicked(evt);
            }
        });
        TglPinjam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TglPinjamActionPerformed(evt);
            }
        });
        getContentPane().add(TglPinjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 200, 220, -1));

        TglKembali.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TglKembaliMouseClicked(evt);
            }
        });
        getContentPane().add(TglKembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 240, 220, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dipinjam", "Sudah Kembali" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 320, -1, -1));

        Angkatan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AngkatanMouseClicked(evt);
            }
        });
        Angkatan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AngkatanKeyTyped(evt);
            }
        });
        getContentPane().add(Angkatan, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 280, 220, -1));

        Nama.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NamaMouseClicked(evt);
            }
        });
        getContentPane().add(Nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 330, 220, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int baris = jTable1.rowAtPoint(evt.getPoint());

        String IdPeminjam = jTable1.getValueAt(baris, 1).toString();
        IDPeminjam.setText(IdPeminjam);

        String idskripsi = jTable1.getValueAt(baris, 2).toString();
        IDSkripsi.setText(idskripsi);// Assuming jComboBox3 is a JComboBox

        String isbn = jTable1.getValueAt(baris, 3).toString();
        ISBN.setText(isbn);

        String nama = jTable1.getValueAt(baris, 4).toString();
        Nama.setText(nama);

        String tglPinjam = jTable1.getValueAt(baris, 5).toString();
        TglPinjam.setText(tglPinjam);

        String tglKembali = jTable1.getValueAt(baris, 5).toString();
        TglKembali.setText(tglKembali);

        String status = jTable1.getValueAt(baris, 6).toString();
        jComboBox1.setSelectedItem(status); // Assuming jComboBox1 is a JComboBox

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String id_peminjam = IDPeminjam.getText().trim();
        String id_skripsi = IDSkripsi.getText();
        String isbn = ISBN.getText();
        String nama = Nama.getText();
        String tgl = TglPinjam.getText();
        String tanggalpeminjaman = TglPinjam.getText();
        String tanggalpengembalian = TglKembali.getText();
        String status = (String) jComboBox1.getSelectedItem();
        SimpleDateFormat tg = new SimpleDateFormat("dd-MM-yyyy");

        try {

            EntityManager entityManager = Persistence.createEntityManagerFactory("JendelaKampusPU").createEntityManager();
            entityManager.getTransaction().begin();
            Skripsi wm = entityManager.find(Skripsi.class, id_skripsi);

            PeminjamanSkripsi p = new PeminjamanSkripsi();
            PeminjamanSkripsiPK peminjamanSkripsiPK = new PeminjamanSkripsiPK();
//            PeminjamanSkripsiPK.setIdSkripsi(id_skripsi);
            p.setPeminjamanSkripsiPK(peminjamanSkripsiPK);
            p.setNamaPeminjam(nama);
            p.setTanggalPinjam(tg.parse(tanggalpeminjaman));
            p.setTanggalKembali(tg.parse(tanggalpengembalian));
            p.setStatus(status);

            entityManager.persist(p);
            entityManager.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Data berhasil disimpan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {

            JOptionPane.showMessageDialog(null, "Gagal menyimpan data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        tampil();
        kosongkan_form();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String id_peminjam = IDPeminjam.getText().trim();
        String id_skripsi = IDSkripsi.getText();
        String isbn = ISBN.getText();
        String nama = Nama.getText();
        String tgl = TglPinjam.getText();
        String tanggalpeminjaman = TglPinjam.getText();
        String tanggalpengembalian = TglKembali.getText();
        String status = (String) jComboBox1.getSelectedItem();
        SimpleDateFormat tg = new SimpleDateFormat("dd-MM-yyyy");

        try {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JendelaKampusPU");
            EntityManager em = emf.createEntityManager();
            Skripsi wm = em.find(Skripsi.class, id_skripsi);
            PeminjamanBuku p = new PeminjamanBuku();
            PeminjamanBukuPK peminjamanBukuPK = new PeminjamanBukuPK();
            peminjamanBukuPK.setIdBuku(id_skripsi);
            p.setPeminjamanBukuPK(peminjamanBukuPK);
            p.setNamaPeminjam(nama);
            p.setTanggalPinjam(tg.parse(tanggalpeminjaman));
            p.setTanggalKembali(tg.parse(tanggalpengembalian));
            p.setStatus(status);
//            p.em.getTransaction().begin();
            em.merge(p);
            em.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Data berhasil diupdate.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {

            JOptionPane.showMessageDialog(null, "Gagal mengupdate data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        tampil();
        kosongkan_form();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String id = IDSkripsi.getText().trim();
        int dialogResult = JOptionPane.showConfirmDialog(null, "Apakah Anda ingin menghapus data?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjectUASPU");
                EntityManager em = emf.createEntityManager();
                em.getTransaction().begin();

                PeminjamanSkripsi b = em.find(PeminjamanSkripsi.class, id);
                em.remove(b);

                em.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "Data berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);

                kosongkan_form();
                tampil();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Gagal menghapus data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            String selection = ((String) jComboBox2.getSelectedItem()).toLowerCase();
            String searchTerm = txtsearch.getText().trim();

            String queryString = "SELECT p FROM Peminjamanskripsi p WHERE ";

            switch (jComboBox2.getSelectedIndex()) {
                case 0:
                    queryString += "LOWER(p.idpeminjams) LIKE LOWER(:searchTerm)";
                    break;
                case 1:
                    queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                    break;
                case 2:
                    queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case 3:
                    queryString += "LOWER(p.prodi) LIKE LOWER(:searchTerm)";
                    break;
                case 4:
                    queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                    break;
                case 5:
                    queryString += "LOWER(p.tanggalpinjam) LIKE LOWER(:searchTerm)";
                    break;
                case 6:
                    queryString += "LOWER(p.tanggalkembali) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected. Selected Criteria: " + selection);
            }

            // ... (switch statement to build the query based on selection)
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjectUASPU");
            EntityManager em = emf.createEntityManager();

            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<PeminjamanSkripsi> query = em.createQuery(queryString, PeminjamanSkripsi.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<PeminjamanSkripsi> results = query.getResultList();

            if (results.isEmpty()) {
                System.out.println("No results found for the given search criteria.");
                return;
            }

            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(results);

            // Load the JasperReports design file
            InputStream inputStream = PeminjamanSkripsi.class.getResourceAsStream("reportPeminjamanSkripsi.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            Map<String, Object> parameter = new HashMap<>();
            parameter.put("querySearch", searchTerm);
            parameter.put("searchBy", selection);
            // Compile the JasperReports design
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            // Fill the report with data
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameter, dataSource);

            if (jasperPrint.getPages().isEmpty()) {
                System.out.println("No data to print!");
                return;
            }

            JasperViewer viewer = new JasperViewer(jasperPrint, false);
            viewer.setTitle("Report Peminjaman");
            viewer.setVisible(true);

        } catch (JRException ex) {
            System.out.println("Error printing report: " + ex.getMessage());
            ex.printStackTrace();
        } catch (Exception e) {
            System.out.println("Unexpected error: " + e.getMessage());
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        JFileChooser filechooser = new JFileChooser();

        int i = filechooser.showOpenDialog(null);
        if (i == JFileChooser.APPROVE_OPTION) {

            EntityManager entityManager = Persistence.createEntityManagerFactory("UASPBOFitriyaPU").createEntityManager();
            entityManager.getTransaction().begin();

            File f = filechooser.getSelectedFile();
            String filepath = f.getPath();
            String fi = f.getName();
            //Parsing CSV Data
            System.out.print(filepath);
            DefaultTableModel csv_data = new DefaultTableModel();

//            try {
//
//                InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(filepath));
//                org.apache.commons.csv.CSVParser csvParser = CSVFormat.DEFAULT.parse(inputStreamReader);
//                for (CSVRecord csvRecord : csvParser) {
//                    PeminjamanSkripsi d = new PeminjamanSkripsi();
//                    d.setIdpeminjams(csvRecord.get(0));
//                    d.setNama(csvRecord.get(1));
//                    d.setAngkatan(csvRecord.get(2));
//                    d.setProdi(csvRecord.get(3));
//                    d.setStatus(csvRecord.get(4));
//                    d.setTanggalpinjam(csvRecord.get(5));
//                    d.setTanggalkembali(csvRecord.get(6));
//
//                    entityManager.persist(d);
//
//                }
//
//            } catch (Exception ex) {
//                System.out.println("Error in Parsing CSV File");
//            }
//
//            entityManager.getTransaction().commit();
//        }
    }//GEN-LAST:event_jButton5ActionPerformed
    }
    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
        int baris = jTable3.rowAtPoint(evt.getPoint());
        if (baris > -1) { // Pastikan baris yang dipilih tidak negatif (-1 menunjukkan tidak ada baris yang dipilih)
            String idSkripsi = jTable3.getValueAt(baris, 1) != null ? jTable3.getValueAt(baris, 1).toString() : "";
            IDSkripsi.setText(idSkripsi);
        }

    }//GEN-LAST:event_jTable3MouseClicked

    private void jTextsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextsearchKeyReleased
        try {
            String selection = (String) jComboBox3.getSelectedItem();
            String searchTerm = jTextsearch.getText().trim().toLowerCase();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT d FROM Skripsi d WHERE ";

            switch (jComboBox3.getSelectedIndex()) {
                case 0:
                    queryString += "LOWER(d.idSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case 1:
                    queryString += "LOWER(d.judulskripsi) LIKE LOWER(:searchTerm)";
                    break;
                case 2:
                    queryString += "LOWER(d.penulis) LIKE LOWER(:searchTerm)";
                    break;
                case 3:
                    queryString += "LOWER(d.kategori) LIKE LOWER(:searchTerm)";
                    break;
                case 4:
                    queryString += "LOWER(d.programstudi) LIKE LOWER(:searchTerm)";
                    break;
                case 5:
                    queryString += "LOWER(d.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case 6:
                    queryString += "LOWER(d.tahunterbits) LIKE LOWER(:searchTerm)";
                    break;
                case 7:
                    queryString += "LOWER(d.jumlahhalamans) LIKE LOWER(:searchTerm)";
                    break;
                case 8:
                    queryString += "LOWER(d.tanggalpenyelesaian) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

//            Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JendelaKampusPU");
            EntityManager em = emf.createEntityManager();

            TypedQuery<Skripsi> query = em.createQuery(queryString, Skripsi.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<Skripsi> results = query.getResultList();
//
            DefaultTableModel dataModel = new DefaultTableModel();

            // Add columns to the model
            dataModel.addColumn("No.");
            dataModel.addColumn("Nomor Indeks");
            dataModel.addColumn("Judul Skripsi");
            dataModel.addColumn("Penulis");
            dataModel.addColumn("Kategori");
            dataModel.addColumn("Program Studi");
            dataModel.addColumn("Angkatan");
            dataModel.addColumn("Tahun Terbit");
            dataModel.addColumn("Jumlah Halaman");
            dataModel.addColumn("Tanggal Penyelesaian");

            // Add rows to the model
            int nomor = 1;
            for (Skripsi result : results) {
                Object[] rowData = {
                    nomor,
                    result.getIdSkripsi(),
                    result.getJudul(),
                    result.getPenulis(),
                    result.getKategoriCollection(),
                    result.getPembimbing(),
                    result.getPenulis(),
                    result.getProgramStudi(),
                    result.getFakultas(),
                };
                dataModel.addRow(rowData);
                nomor++;
            }

            // Set jTable1 with the created model
            jTable3.setModel(dataModel);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jTextsearchKeyReleased

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void ISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ISBNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ISBNActionPerformed

    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased
        try {
            String selection = ((String) jComboBox2.getSelectedItem()).toLowerCase();
            String searchTerm = txtsearch.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT p FROM Peminjaman p WHERE ";

            switch (jComboBox2.getSelectedIndex()) {
                case 0:
                    queryString += "LOWER(p.idpeminjam) LIKE LOWER(:searchTerm)";
                    break;
                case 1:
                    queryString += "LOWER(p.isbn) LIKE LOWER(:searchTerm)";
                    break;
                case 2:
                    queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                    break;
                case 3:
                    queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case 4:
                    queryString += "LOWER(p.prodi) LIKE LOWER(:searchTerm)";
                    break;
                case 5:
                    queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                    break;
                case 6:
                    queryString += "LOWER(p.tanggalpeminjaman) LIKE LOWER(:searchTerm)";
                    break;
                case 7:
                    queryString += "LOWER(p.tanggalpengembalian) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected. Selected Criteria: " + selection);
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjectUASPU");
            EntityManager em = emf.createEntityManager();

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            System.out.println("Query: " + queryString);
            System.out.println("Search Term: " + searchTerm);

//            TypedQuery<Peminjaman> query = em.createQuery(queryString, Peminjaman.class);
//            query.setParameter("searchTerm", "%" + searchTerm + "%");
//
//            List<Peminjaman> results = query.getResultList();
            DefaultTableModel dataModel = new DefaultTableModel();

            // Add columns to the model
            dataModel.addColumn("No.");
            dataModel.addColumn("ID Peminjam");
            dataModel.addColumn("ISBN");
            dataModel.addColumn("Nama");
            dataModel.addColumn("Angkatan");
            dataModel.addColumn("Prodi");
            dataModel.addColumn("status");
            dataModel.addColumn("Tanggal Peminjaman");
            dataModel.addColumn("Tanggal Pengembalian");
            // ... add other columns as needed
//            int nomor = 1;
//            // Add rows to the model
//            for (Peminjaman result : results) {
//                Object[] rowData = {
//                    nomor,
//                    result.getIdpeminjam(),
//                    result.getIsbn().getIsbn(),
//                    result.getNama(),
//                    result.getAngkatan(),
//                    result.getProdi(),
//                    result.getStatus(),
//                    result.getTanggalpeminjaman(),
//                    result.getTanggalpengembalian()
//                    // ... add other data fields as needed
//                };
//                dataModel.addRow(rowData);
//                nomor++;
//            }
//
//            // Set jTable1 with the created model
//            jTable1.setModel(dataModel);
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_txtsearchKeyReleased
    }
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void TglPinjamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TglPinjamMouseClicked
        // TODO add your handling code here:
        JFrame frame = new JFrame("Date Picker Example");
        frame.setSize(200, 100);

        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout());

        JDateChooser dateChooser = new JDateChooser();

        // Menghapus editor dari JDateChooser agar tidak dapat diedit
        dateChooser.getDateEditor().setEnabled(false);

        // Set format tanggal yang diinginkan pada JDateChooser
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        dateChooser.setDateFormatString("yyyy/MM/dd");

        dateChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                Date selectedDate = dateChooser.getDate();
                if (selectedDate != null) {
                    String formattedDate = dateFormat.format(selectedDate);
                    dateChooser.setDate(selectedDate); // Menetapkan tanggal yang diformat kembali ke dateChooser
                    dateChooser.repaint(); // Memperbarui tampilan dateChooser
                    dateChooser.transferFocus(); // Pindah fokus dari dateChooser

                    // Set tanggal yang diformat ke j4
                    TglPinjam.setText(formattedDate);
                }
            }
        });

        panel.add(dateChooser);

        frame.add(panel);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
    }//GEN-LAST:event_TglPinjamMouseClicked

    private void TglPinjamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TglPinjamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TglPinjamActionPerformed

    private void TglKembaliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TglKembaliMouseClicked
        // TODO add your handling code here:
        JFrame frame = new JFrame("Date Picker Example");
        frame.setSize(200, 100);

        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout());

        JDateChooser dateChooser = new JDateChooser();

        // Menghapus editor dari JDateChooser agar tidak dapat diedit
        dateChooser.getDateEditor().setEnabled(false);

        // Set format tanggal yang diinginkan pada JDateChooser
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        dateChooser.setDateFormatString("yyyy/MM/dd");

        dateChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                Date selectedDate = dateChooser.getDate();
                if (selectedDate != null) {
                    String formattedDate = dateFormat.format(selectedDate);
                    dateChooser.setDate(selectedDate); // Menetapkan tanggal yang diformat kembali ke dateChooser
                    dateChooser.repaint(); // Memperbarui tampilan dateChooser
                    dateChooser.transferFocus(); // Pindah fokus dari dateChooser

                    // Set tanggal yang diformat ke j4
                    TglKembali.setText(formattedDate);
                }
            }
        });

        panel.add(dateChooser);

        frame.add(panel);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
    }//GEN-LAST:event_TglKembaliMouseClicked

    private void AngkatanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AngkatanMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_AngkatanMouseClicked

    private void AngkatanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AngkatanKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_AngkatanKeyTyped

    private void NamaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NamaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_NamaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PinjamSkripsi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Angkatan;
    private javax.swing.JTextField IDPeminjam;
    private javax.swing.JTextField IDSkripsi;
    private javax.swing.JTextField ISBN;
    private javax.swing.JTextField Nama;
    private javax.swing.JTextField TglKembali;
    private javax.swing.JTextField TglPinjam;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextsearch;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables
}
